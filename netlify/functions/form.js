const axios = require('axios');

exports.handler = async function (event) {
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  const webhookUrl = process.env.WEBHOOK_URL;
  const webhookUrlPlayers = process.env.WEBHOOK_URL_PLAYERS;
  const apiUrl = process.env.API_URL;
  const apiKey = process.env.PTERODACTYL_API_KEY;

  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: JSON.stringify({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è' }) };
  }

  const { minecaftInput, twitchInput } = JSON.parse(event.body);

  // URL –∞–≤–∞—Ç–∞—Ä–∞ –≥—Ä–∞–≤—Ü—è Minecraft
  const avatarUrl = `https://www.mc-heads.net/avatar/${minecaftInput}`;

  // –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ—Å–Ω–æ–≤–Ω–∞ –∑–∞—è–≤–∫–∞)
  const webhookBody = {
    embeds: [{
      title: '–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
      color: 0x00ff00, // –ó–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä
      fields: [
        { name: 'üéÆ Minecraft', value: minecaftInput, inline: true },
        { name: 'üì∫ Twitch', value: twitchInput, inline: true },
      ],
      footer: { text: "üîó –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä" },
      timestamp: new Date().toISOString(),
    }],
  };

  // –î—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑ –∞–≤–∞—Ç–∞—Ä–æ–º –≥—Ä–∞–≤—Ü—è)
  const avatarMessage = {
    username: "–ù–æ–≤–∏–π –≥—Ä–∞–≤–µ—Ü—å",
    avatar_url: { url: avatarUrl },
    thumbnail: { url: avatarUrl },
    embeds: [{
      title: `–í—ñ—Ç–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ!`,
      thumbnail: { url: avatarUrl },
      color: 0x3498db,
      fields: [
        { name: 'üéÆ Minecraft', value: minecaftInput, inline: true },
        { name: ' ', value: ' ', inline: false },
        { name: 'üì∫ Twitch', value: twitchInput, inline: true },
      ],
    }],
  };

  try {
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Discord Webhook
    await axios.post(webhookUrl, webhookBody, {
      headers: { 'Content-Type': 'application/json' },
    });

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–≤–∞—Ç–∞—Ä–æ–º
    await axios.post(webhookUrlPlayers, avatarMessage, {
      headers: { 'Content-Type': 'application/json' },
    });

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥–∏ "/say api test" –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ Pterodactyl API
    const commandResponse = await axios.post(
      apiUrl,
      { command: "nwl add name " + minecaftInput },
      {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      }
    );

    return {
      statusCode: 200,
      body: JSON.stringify({ message: '–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!', response: commandResponse.data }),
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ message: `–ü–æ–º–∏–ª–∫–∞: ${error.response?.data || error.message}` }),
    };
  }
};
